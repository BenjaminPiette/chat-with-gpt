{"version":3,"file":"static/js/45.b27347cf.chunk.js","mappings":"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","sources":["components/tts-button.tsx","components/markdown.tsx","components/message.tsx"],"sourcesContent":["import { Button } from \"@mantine/core\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { useTTS } from \"../core/tts/use-tts\";\nimport { useAppDispatch } from \"../store\";\nimport { setTabAndOption } from \"../store/settings-ui\";\n\nconst autoplayed = new Set<string>();\n\nexport function TTSButton(props: { id: string, selector: string, complete: boolean, autoplay?: boolean }) {\n    const dispatch = useAppDispatch();\n    const { key, state, voice, autoplayEnabled, play, pause, cancel, setSourceElement, setComplete } = useTTS();\n    const [clicked, setClicked] = useState(false);\n\n    const onClick = useCallback(() => {\n        setClicked(true);\n\n        if (!voice) {\n            dispatch(setTabAndOption({ tab: 'speech', option: 'service' }));\n            return;\n        }\n\n        if (!state || key !== props.id) {\n            setSourceElement(props.id, document.querySelector(props.selector)!);\n            play();\n        } else {\n            cancel();\n        }\n        setComplete(props.complete);\n    }, [state, key, props.id, props.selector, props.complete, voice]); //\n\n    useEffect(() => {\n        if (key === props.id) {\n            setComplete(props.complete);\n        }\n    }, [key, props.id, props.complete]);\n\n    useEffect(() => {\n        if (autoplayEnabled && props.autoplay && key !== props.id && voice && !clicked && !autoplayed.has(props.id) && document.visibilityState === 'visible') {\n            autoplayed.add(props.id);\n            setSourceElement(props.id, document.querySelector(props.selector)!);\n            play();\n        }\n    }, [clicked, key, voice, autoplayEnabled, props.id, props.selector, props.complete, props.autoplay]);\n\n    let active = state && key === props.id;\n\n    return (<>\n        <Button variant=\"subtle\" size=\"sm\" compact onClickCapture={onClick} loading={active && state?.buffering}>\n            {!active && <i className=\"fa fa-headphones\" />}\n            {!active && <span>\n                <FormattedMessage defaultMessage=\"Play\" description=\"Label for the button that starts text-to-speech playback\" />\n            </span>}\n            {active && state?.buffering && <span>\n                <FormattedMessage defaultMessage=\"Loading audio...\" description=\"Message indicating that text-to-speech audio is buffering\" />\n            </span>}\n            {active && !state?.buffering && <span>\n                <FormattedMessage defaultMessage=\"Stop\" description=\"Label for the button that stops text-to-speech playback\" />\n            </span>}\n        </Button>\n    </>);\n}\n","import styled from '@emotion/styled';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math'\nimport rehypeKatex from 'rehype-katex'\nimport { Button, CopyButton } from '@mantine/core';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst Code = styled.div`\n    padding: 0;\n    border-radius: 0.25rem;\n    overflow: hidden;\n\n    &>div {\n        margin: 0 !important;\n    }\n\n    .fa {\n        font-style: normal !important;\n    }\n`;\n\nconst Header = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    background: #191919;\n    height: 2.5rem;\n    padding: 0.1rem 0.1rem 0 0.5rem;\n\n    .mantine-Button-label {\n        display: flex;\n        align-items: center;\n\n        * {\n            font-size: 90%;\n        }\n    }\n`;\n\nconst ImagePreview = styled.div`\n    text-align: center;\n\n    img {\n        max-width: 30rem !important;\n        display: block;\n    }\n`;\n\nexport interface MarkdownProps {\n    content: string;\n    className?: string;\n}\n\nexport function Markdown(props: MarkdownProps) {\n    const intl = useIntl();\n\n    const classes = useMemo(() => {\n        const classes = ['prose', 'dark:prose-invert'];\n\n        if (props.className) {\n            classes.push(props.className);\n        }\n\n        return classes;\n    }, [props.className])\n\n    const elem = useMemo(() => (\n        <div className={classes.join(' ')}>\n            <ReactMarkdown\n                remarkPlugins={[remarkGfm, remarkMath]}\n                rehypePlugins={[rehypeKatex]}\n                components={{\n                    ol({ start, children }) {\n                        return <ol start={start ?? 1} style={{ counterReset: `list-item ${(start || 1)}` }}>\n                            {children}\n                        </ol>;\n                    },\n                    code({ node, inline, className, children, ...props }) {\n                        const match = /language-(\\w+)/.exec(className || '')\n                        const code = String(children);\n                        return !inline ? (<>\n                            <Code>\n                                <Header>\n                                    {code.startsWith('<svg') && code.includes('</svg>') && (\n                                        <Button variant=\"subtle\" size=\"sm\" compact onClick={() => {\n                                            const blob = new Blob([code], { type: 'image/svg+xml' });\n                                            const url = URL.createObjectURL(blob);\n                                            const a = document.createElement('a');\n                                            a.href = url;\n                                            a.download = 'image.svg';\n                                            a.click();\n                                        }}>\n                                            <i className=\"fa fa-download\" />\n                                            <span><FormattedMessage defaultMessage=\"Download SVG\" /></span>\n                                        </Button>\n                                    )}\n                                    <CopyButton value={code}>\n                                        {({ copy, copied }) => (\n                                            <Button variant=\"subtle\" size=\"sm\" compact onClick={copy}>\n                                                <i className=\"fa fa-clipboard\" />\n                                                <span>\n                                                    {copied ? <FormattedMessage defaultMessage=\"Copied\" description=\"Label for copy-to-clipboard button after a successful copy\" />\n                                                        : <FormattedMessage defaultMessage=\"Copy\" description=\"Label for copy-to-clipboard button\" />}\n                                                </span>\n                                            </Button>\n                                        )}\n                                    </CopyButton>\n                                </Header>\n                                <SyntaxHighlighter\n                                    children={code}\n                                    style={vscDarkPlus as any}\n                                    language={match?.[1] || 'text'}\n                                    PreTag=\"div\"\n                                    {...props} />\n                            </Code>\n                            {code.startsWith('<svg') && code.includes('</svg>') && (\n                                <ImagePreview>\n                                    <img src={`data:image/svg+xml;base64,${btoa(code)}`} />\n                                </ImagePreview>\n                            )}\n                        </>) : (\n                            <code className={className} {...props}>\n                                {children}\n                            </code>\n                        )\n                    }\n                }}>{props.content}</ReactMarkdown>\n        </div>\n    ), [props.content, classes, intl]);\n\n    return elem;\n}\n","import styled from '@emotion/styled';\nimport { Button, CopyButton, Loader, Textarea } from '@mantine/core';\n\nimport { Message } from \"../core/chat/types\";\nimport { share } from '../core/utils';\nimport { TTSButton } from './tts-button';\nimport { Markdown } from './markdown';\nimport { useAppContext } from '../core/context';\nimport { useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useAppSelector } from '../store';\nimport { selectSettingsTab } from '../store/settings-ui';\n\n// hide for everyone but screen readers\nconst SROnly = styled.span`\n    position: fixed;\n    left: -9999px;\n    top: -9999px;\n`;\n\nconst Container = styled.div`\n    &.by-user {\n        background: #22232b;\n    }\n\n    &.by-assistant {\n        background: #292933;\n    }\n\n    &.by-assistant + &.by-assistant, &.by-user + &.by-user {\n        border-top: 0.2rem dotted rgba(0, 0, 0, 0.1);\n    }\n\n    &.by-assistant {\n        border-bottom: 0.2rem solid rgba(0, 0, 0, 0.1);\n    }\n\n    position: relative;\n    padding: 1.618rem;\n\n    @media (max-width: 40em) {\n        padding: 1rem;\n    }\n\n    .inner {\n        margin: auto;\n    }\n\n    .content {\n        font-family: \"Open Sans\", sans-serif;\n        margin-top: 0rem;\n        max-width: 100%;\n\n        * {\n            color: white;\n        }\n\n        p, ol, ul, li, h1, h2, h3, h4, h5, h6, img, blockquote, &>pre {\n            max-width: 50rem;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        img {\n            display: block;\n            max-width: 50rem;\n\n            @media (max-width: 50rem) {\n                max-width: 100%;\n            }\n        }\n\n        ol {\n            counter-reset: list-item;\n\n            li {\n                counter-increment: list-item;\n            }\n        }\n\n        em, i {\n            font-style: italic;\n        }\n\n        code {\n            &, * {\n                font-family: \"Fira Code\", monospace !important;\n            }\n            vertical-align: bottom;\n        }\n\n        /* Tables */\n        table {\n            margin-top: 1.618rem;\n            border-spacing: 0px;\n            border-collapse: collapse;\n            border: thin solid rgba(255, 255, 255, 0.1);\n            width: 100%;\n            max-width: 55rem;\n            margin-left: auto;\n            margin-right: auto;\n        }\n        td + td, th + th {\n            border-left: thin solid rgba(255, 255, 255, 0.1);\n        }\n        tr {\n            border-top: thin solid rgba(255, 255, 255, 0.1);\n        }\n        table td,\n        table th {\n            padding: 0.618rem 1rem;\n        }\n        th {\n            font-weight: 600;\n            background: rgba(255, 255, 255, 0.1);\n        }\n    }\n\n    .metadata {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: center;\n        font-family: \"Work Sans\", sans-serif;\n        font-size: 0.8rem;\n        font-weight: 400;\n        opacity: 0.6;\n        max-width: 50rem;\n        margin-bottom: 0.0rem;\n        margin-right: -0.5rem;\n        margin-left: auto;\n        margin-right: auto;\n\n        span + span {\n            margin-left: 1em;\n        }\n\n        .fa {\n            font-size: 85%;\n        }\n\n        .fa + span {\n            margin-left: 0.2em;\n\n            @media (max-width: 40em) {\n                display: none;\n            }\n        }\n\n        .mantine-Button-root {\n            color: #ccc;\n            font-size: 0.8rem;\n            font-weight: 400;\n\n            .mantine-Button-label {\n                display: flex;\n                align-items: center;\n            }\n        }\n    }\n\n    .fa {\n        margin-right: 0.5em;\n        font-size: 85%;\n    }\n\n    .buttons {\n        text-align: right;\n    }\n\n    strong {\n        font-weight: bold;\n    }\n`;\n\nconst EndOfChatMarker = styled.div`\n    position: absolute;\n    bottom: calc(-1.618rem - 0.5rem);\n    left: 50%;\n    width: 0.5rem;\n    height: 0.5rem;\n    margin-left: -0.25rem;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.1);\n`;\n\nconst Editor = styled.div`\n    max-width: 50rem;\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 0.5rem;\n\n    .mantine-Button-root {\n        margin-top: 1rem;\n    }\n`;\n\nfunction InlineLoader() {\n    return (\n        <Loader variant=\"dots\" size=\"xs\" style={{\n            marginLeft: '1rem',\n            position: 'relative',\n            top: '-0.2rem',\n        }} />\n    );\n}\n\nexport default function MessageComponent(props: { message: Message, last: boolean, share?: boolean }) {\n    const context = useAppContext();\n    const [editing, setEditing] = useState(false);\n    const [content, setContent] = useState('');\n    const intl = useIntl();\n\n    const tab = useAppSelector(selectSettingsTab);\n\n    const getRoleName = useCallback((role: string, share = false) => {\n        switch (role) {\n            case 'user':\n                if (share) {\n                    return intl.formatMessage({ id: 'role-user-formal', defaultMessage: 'User', description: \"Label that is shown above messages written by the user (as opposed to the AI) for publicly shared conversation (third person, formal).\" });\n                } else {\n                    return intl.formatMessage({ id: 'role-user', defaultMessage: 'You', description: \"Label that is shown above messages written by the user (as opposed to the AI) in the user's own chat sessions (first person).\" });\n                }\n                break;\n            case 'assistant':\n                return intl.formatMessage({ id: 'role-chatgpt', defaultMessage: 'ChatGPT', description: \"Label that is shown above messages written by the AI (as opposed to the user)\" });\n            case 'system':\n                return intl.formatMessage({ id: 'role-system', defaultMessage: 'System', description: \"Label that is shown above messages inserted into the conversation automatically by the system (as opposed to either the user or AI)\" });\n            default:\n                return role;\n        }\n    }, [intl]);\n\n    const elem = useMemo(() => {\n        if (props.message.role === 'system') {\n            return null;\n        }\n\n        return (\n            <Container className={\"message by-\" + props.message.role}>\n                <div className=\"inner\">\n                    <div className=\"metadata\">\n                        <span>\n                            <strong>\n                                {getRoleName(props.message.role, props.share)}{props.message.model === 'gpt-4' && ' (GPT 4)'}<SROnly>:</SROnly>\n                            </strong>\n                            {props.message.role === 'assistant' && props.last && !props.message.done && <InlineLoader />}\n                        </span>\n                        <TTSButton id={props.message.id}\n                            selector={'.content-' + props.message.id}\n                            complete={!!props.message.done}\n                            autoplay={props.last && context.chat.lastReplyID === props.message.id} />\n                        <div style={{ flexGrow: 1 }} />\n                        <CopyButton value={props.message.content}>\n                            {({ copy, copied }) => (\n                                <Button variant=\"subtle\" size=\"sm\" compact onClick={copy} style={{ marginLeft: '1rem' }}>\n                                    <i className=\"fa fa-clipboard\" />\n                                        {copied ? <FormattedMessage defaultMessage=\"Copied\" description=\"Label for copy-to-clipboard button after a successful copy\" />\n                                        : <span><FormattedMessage defaultMessage=\"Copy\" description=\"Label for copy-to-clipboard button\" /></span>}\n                                </Button>\n                            )}\n                        </CopyButton>\n                        {typeof navigator.share !== 'undefined' && (\n                            <Button variant=\"subtle\" size=\"sm\" compact onClick={() => share(props.message.content)}>\n                                <i className=\"fa fa-share\" />\n                                <span>\n                                    <FormattedMessage defaultMessage=\"Share\" description=\"Label for a button which shares the text of a chat message using the user device's share functionality\" />\n                                </span>\n                            </Button>\n                        )}\n                        {!context.isShare && props.message.role === 'user' && (\n                            <Button variant=\"subtle\" size=\"sm\" compact onClick={() => {\n                                setContent(props.message.content);\n                                setEditing(v => !v);\n                            }}>\n                                <i className=\"fa fa-edit\" />\n                                <span>\n                                    {editing ? <FormattedMessage defaultMessage=\"Cancel\" description=\"Label for a button that appears when the user is editing the text of one of their messages, to cancel without saving changes\" />\n                                        : <FormattedMessage defaultMessage=\"Edit\" description=\"Label for the button the user can click to edit the text of one of their messages\" />}\n                                </span>\n                            </Button>\n                        )}\n                        {!context.isShare && props.message.role === 'assistant' && (\n                            <Button variant=\"subtle\" size=\"sm\" compact onClick={() => context.regenerateMessage(props.message)}>\n                                <i className=\"fa fa-refresh\" />\n                                <span>\n                                    <FormattedMessage defaultMessage=\"Regenerate\" description=\"Label for the button used to ask the AI to regenerate one of its messages. Since message generations are stochastic, the resulting message will be different.\" />\n                                </span>\n                            </Button>\n                        )}\n                    </div>\n                    {!editing && <Markdown content={props.message.content} className={\"content content-\" + props.message.id} />}\n                    {editing && (<Editor>\n                        <Textarea value={content}\n                            onChange={e => setContent(e.currentTarget.value)}\n                            autosize={true} />\n                        <Button variant=\"light\" onClick={() => context.editMessage(props.message, content)}>\n                            <FormattedMessage defaultMessage=\"Save changes\" description=\"Label for a button that appears when the user is editing the text of one of their messages, to save the changes\" />\n                        </Button>\n                        <Button variant=\"subtle\" onClick={() => setEditing(false)}>\n                            <FormattedMessage defaultMessage=\"Cancel\" description=\"Label for a button that appears when the user is editing the text of one of their messages, to cancel without saving changes\" />\n                        </Button>\n                    </Editor>)}\n                </div>\n                {props.last && <EndOfChatMarker />}\n            </Container>\n        )\n    }, [props.last, props.share, editing, content, context, props.message, props.message.content, tab]);\n\n    return elem;\n}"],"names":["autoplayed","Set","TTSButton","props","dispatch","useAppDispatch","_useTTS","useTTS","key","state","voice","autoplayEnabled","play","cancel","pause","setSourceElement","setComplete","_useState","useState","_useState2","_slicedToArray","clicked","setClicked","onClick","useCallback","id","document","querySelector","selector","complete","setTabAndOption","tab","option","useEffect","autoplay","has","visibilityState","add","active","_jsx","_Fragment","children","_jsxs","Button","variant","size","compact","onClickCapture","loading","buffering","className","FormattedMessage","defaultMessage","Code","styled","div","_templateObject","_taggedTemplateLiteral","Header","_templateObject2","ImagePreview","_templateObject3","Markdown","intl","useIntl","classes","useMemo","push","join","ReactMarkdown","remarkPlugins","remarkGfm","remarkMath","rehypePlugins","rehypeKatex","components","ol","_ref","start","style","counterReset","concat","code","_ref2","node","inline","_objectWithoutProperties","_excluded","match","exec","String","_objectSpread","startsWith","includes","blob","Blob","type","url","URL","createObjectURL","a","createElement","href","download","click","CopyButton","value","_ref3","copy","copied","SyntaxHighlighter","vscDarkPlus","language","PreTag","src","btoa","content","SROnly","span","Container","EndOfChatMarker","Editor","_templateObject4","InlineLoader","Loader","marginLeft","position","top","MessageComponent","context","useAppContext","editing","setEditing","_useState3","_useState4","setContent","useAppSelector","selectSettingsTab","getRoleName","role","share","arguments","length","undefined","formatMessage","message","model","last","done","chat","lastReplyID","flexGrow","navigator","isShare","v","regenerateMessage","Textarea","onChange","e","currentTarget","autosize","editMessage"],"sourceRoot":""}